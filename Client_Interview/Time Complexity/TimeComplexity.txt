                                        How to analyze Time Complexity.....

A.
What is time Complexity?
1.
n-: prime number 2,3,5,7,11

for i <- 2 to n-1   if n=11
if i divided by n    11-1=10 ms
n is not prime

for i <- 2 to √n    √11-1=2.66ms
if i divided by n
n is not prime       do for big numbers 1000000000


B.
How to calculate running time
2.Running time depend on
   1.Single Vs Multi processor
   2.Read/write speed to memory
   3.32 bit Vs 64 bit
   4.Input-(Time Complexity only depend on input)
          -rate of growth of time

 Example 
    Model Machine
        1.Single processor 32 bit
        2.sequential execution
        3. 1 unit time for arithmetical and logical operations
        4. 1 unit for assignment and return

        1.sum(a,b) 
        {
            return a+b;       Tsum= 2 (constant)
        }   //1 unit  + 1 unit  

        2.sumOfList(A,n)
        {                              cost   numberOfTimes
           1. total=0;                   1(c1)         1
           2. for(i=0 to n-1)            2(c2)         n+1 = n-1+2
           3. total=total+Ai;            2(c3)         n
           4. return total;              1(c4)         1
        } 

        TsumOfList=1+2(n+1)+2n+1
                   4n+4 

        Tn= cn + c'
        where c= c2 +c3
              c'=c1+c2+c4

        Tsum = k;              O(1)  O-: Asymptotic notation
        TsumOfList=c.n+c'      O(n)
        TsumOfMatrix=an²+bn+c  O(n²)      

********************************************************************************************************************
C.
Asymptotic notation
3.

Algorithm a -> T(n)= 5n²+7     // n -> ∞  ,  n0 constants
Algorithm b -> T(n)= 17n²+6n+8 //model Machine
                      
                      +7 and +6n+8 (Quadratic rate of growth)

 1. O - "Bog-oh"  notation  -> Upper Bound
    
    O(g(n)) = {
        f(n): there exist constants c and n0
        f(n) <= g(n) for n >= n0
    }

    f(n) = 5n² + 2n + 1  O(n²)
    g(n) = n²

    c = 8   f(n) <= 8n² , x >= 1
    n0=1

********************************************************************************************************************
D.Last
Some general Rules   
4.

We analyze time Complexity for
          1.very Large input size.
          2.worst case scenario

    Example-:
       T(n)= n³+3n²+4n+2
        = n³  (n³ -> ∞)      
          cn³   O(n³)

          Rule-:
            1.Drop Lower order term
            2.Drop constant Multiplier
**********************************************************
    Rule-:
      Running time = sumOf(Running Time of all fragments)    

    A. int a;                                 
       a=5;
       a++;

       Simple Statements fragment 1
       O(1)

**********************************************************
    B. forint i=0;i<n;i++)
         {
             //Simple Statements
         }

         Single Loop
         fragments 2
         O(n) 


**********************************************************
    C.  forint i=0;i<n;i++)
         {
             forint j=0;j<n;j++)
         {
             //Simple Statements
         }
         }

         Nested Loop
         fragments 3
         O(n²) 

**********************************************************
         Conclusion
             function(){
       int a;                                 
       a=5;
       a++;---------> O(1)

       forint i=0;i<n;i++)
         {
             //Simple Statements
         }----------> O(n)

         
         forint i=0;i<n;i++)
         {
             forint j=0;j<n;j++)
            {
             //Simple Statements
            }
         }----------> O(n²)

             }

             T(n)=O(1) + O(n) + O(n²)

**********************************************************
 function ()
 {
     if(some condition)
     {
          forint i=0;i<n;i++)------------>O(n)
         {
             //Simple Statements
         }
     }else
     {
         forint i=0;i<n;i++)
         {
             forint j=0;j<n;j++)------------>O(n²)
         {
             //Simple Statements
         }
         }
     }
 }   


 T(n)=O(n²)   Rule -: Conditinal statements
                      pick Complexity of condition which is worst cases         


                                              
 