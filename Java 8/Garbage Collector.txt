The garbage collector is a program which runs on the Java Virtual Machine which gets rid of objects 
which are not being used by a Java application anymore. It is a form of automatic memory management.

When a typical Java application is running, it is creating new objects, 
such as Strings and Files, but after a certain time, those objects are not used anymore. 
For example, take a look at the following code:

for (File f : files) {
    String s = f.getName();
}

In the above code, the String s is being created on each iteration of the for loop. 
This means that in every iteration, a little bit of memory is being allocated to make a String object.
Going back to the code, we can see that once a single iteration is executed, 
in the next iteration, 
the String object that was created in the previous iteration is not being used anymore -- that object is 
now considered "garbage".

Eventually, we'll start getting a lot of garbage, and memory will be used for objects which aren't being used anymore. 
If this keeps going on, eventually the Java Virtual Machine will run out of space to make new objects.

That's where the garbage collector steps in.

The garbage collector will look for objects which aren't being used anymore, 
and gets rid of them, freeing up the memory so other new objects can use that piece of memory.

In Java, memory management is taken care of by the garbage collector, 
but in other languages such as C, one needs to perform memory management on their own using functions such as 
malloc and free. 
Memory management is one of those things which are easy to make mistakes, 
which can lead to what are called memory leaks -- places where memory is not reclaimed when they are not in use anymore.

Automatic memory management schemes like garbage collection makes it so the programmer 
does not have to worry so much about memory management issues, 
so he or she can focus more on developing the applications they need to develop.

***********************************************************************************************************

We can also request JVM to run Garbage Collector. There are two ways to do it :
Using System.gc() method : 
System class contain static method gc() for requesting JVM to run Garbage Collector.

Using Runtime.getRuntime().gc() method : 
Runtime class allows the application to interface with the JVM in which the application is running. 
Hence by using its gc() method, we can request JVM to run Garbage Collector.

// Java program to demonstrate requesting 
// JVM to run Garbage Collector 
public class Test 
{ 
	public static void main(String[] args) throws InterruptedException 
	{ 
		Test t1 = new Test(); 
		Test t2 = new Test(); 
		
		// Nullifying the reference variable 
		t1 = null; 
		
		// requesting JVM for running Garbage Collector 
		System.gc(); 
		
		// Nullifying the reference variable 
		t2 = null; 
		
		// requesting JVM for running Garbage Collector 
		Runtime.getRuntime().gc(); 
	
	} 
	
	@Override
	// finalize method is called on object once 
	// before garbage collecting it 
	protected void finalize() throws Throwable 
	{ 
		System.out.println("Garbage collector called"); 
		System.out.println("Object garbage collected : " + this); 
	} 
} 

***********************************************************************************************************
